version: '3.9'

services:
  malgo-operator:
    build:
      context: ./malgo-operator
    container_name: malgo-frontend
    ports:
      - "${FRONTEND_PORT}:3000" # TODO: replace with env value
    env_file:
      - frontend.env
    environment:
      - POSTGRES_URL="postgres://${POSTGRES_URL}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
    networks:
      - default
      - postgres-net
    depends_on:
      - schema-migration:
          condition: service_completed_successfully

  malgo-websocket:
    build:
      context: ./services/malgo-websocket
    container_name: malgo-websocket
    environment:
      - DATABASE_URL="postgres://${POSTGRES_URL}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
      - REDIS_URL=redis:6379
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    ports:
      - "${WS_PORT}:${WS_PORT}"
    networks:
      - malgo-services
    depends_on:
      - schema-migration:
          condition: service_completed_successfully

  malgo-gateway:
    build:
      context: ./services/malgo-gateway
    container_name: malgo-gateway
    environment:
      - DATABASE_URL="postgres://${POSTGRES_URL}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
      - REDIS_URL=redis:6379
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    networks:
      - malgo-services
    ports:
      - "${GRPC_PORT}:${GRPC_PORT}"
    depends_on:
      - schema-migration:
          condition: service_completed_successfully

  postgres:
    image: postgres:16.2
    container_name: postgres
    environment:
      - POSTGRES_USER="${POSTGRES_USER}"
      - POSTGRES_PASSWORD="${POSTGRES_PASSWORD}"
      - POSTGRES_DB="${POSTGRES_DB}"
    networks:
      - postgres-net
      - malgo-services
    volumes:
      - postgresdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"] # TODO: replace with env value
      interval: 10s
      timeout: 5s
      retries: 5

  schema-migration:
    build:
      context: ./malgo-operator/drizzle.Dockerfile
    container_name: schema-migration
    environment:
      - POSTGRES_URL="postgres://${POSTGRES_URL}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
    networks:
      - postgres-net
    depends_on:
      - postgres:
          condition: service_healthy

  redis:
    image: redis/redis-stack:latest
    container_name: redis
    ports:
      - 8001:8001
    networks:
      - malgo-services

  jaeger:
    image: jaegertracing/all-in-one:1.6
    container_name: jaeger
    ports:
      - 16686:16686
    networks:
      - malgo-services

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER="${GRAFANA_DEFAULT_USER}"
      - GF_SECURITY_ADMIN_PASSWORD="${GRAFANA_DEFAULT_PASSWORD}"
    volumes:
      - grafanadata:/var/lib/grafana
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/grafana_dashboards/:/var/lib/grafana/dashboards/
    networks:
      - metrics

  #  Metrics collector.
  #  It scrapes targets defined in --promscrape.config
  #  And forward them to --remoteWrite.url
  vmagent:
    container_name: vmagent
    image: victoriametrics/vmagent:v1.101.0
    depends_on:
      - "victoriametrics"
    environment:
      - C2_WEBSOCKET_HOST="malgo-websocket:${WS_PORT}"
    ports:
      - 8429:8429
    volumes:
      - vmagentdata:/vmagentdata
      - ./docker/victoriametrics/:/etc/prometheus/
    command:
      - "--promscrape.config=/etc/prometheus/prometheus.yml"
      - "--remoteWrite.url=http://victoriametrics:8428/api/v1/write"
    restart: unless-stopped
    networks:
      - metrics
      - malgo-services

  # VictoriaMetrics instance, a single process responsible for
  # storing metrics and serve read requests.
  victoriametrics:
    container_name: victoriametrics
    image: victoriametrics/victoria-metrics:v1.101.0
    ports:
      - 8428:8428
    volumes:
      - vmdata:/storage
    command:
      - "--storageDataPath=/storage"
      - "--graphiteListenAddr=:2003"
      - "--opentsdbListenAddr=:4242"
      - "--httpListenAddr=:8428"
      - "--influxListenAddr=:8089"
    restart: unless-stopped
    networks:
      - metrics

volumes:
  postgresdata: {}
  vmagentdata: {}
  vmdata: {}
  grafanadata: {}

networks:
  default:
    driver: bridge
  metrics:
    driver: bridge
  malgo-services:
    driver: bridge
  postgres-net:
    driver: bridge
  redirector:
    driver: bridge