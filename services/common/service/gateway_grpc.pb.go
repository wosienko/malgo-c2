// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: common/service/gateway.proto

package gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayServiceClient is the client API for GatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayServiceClient interface {
	RegisterNewSession(ctx context.Context, in *RegisterNewSessionRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	SessionHeartbeat(ctx context.Context, in *SessionHeartbeatRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	CommandInfo(ctx context.Context, in *CommandInfoRequest, opts ...grpc.CallOption) (*CommandInfoResponse, error)
	CommandDetailsChunk(ctx context.Context, in *CommandDetailsChunkRequest, opts ...grpc.CallOption) (*CommandDetailsChunkResponse, error)
	ResultInfo(ctx context.Context, in *ResultInfoRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ResultDetailsChunk(ctx context.Context, in *ResultDetailsChunkRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type gatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayServiceClient(cc grpc.ClientConnInterface) GatewayServiceClient {
	return &gatewayServiceClient{cc}
}

func (c *gatewayServiceClient) RegisterNewSession(ctx context.Context, in *RegisterNewSessionRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/gateway.GatewayService/RegisterNewSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) SessionHeartbeat(ctx context.Context, in *SessionHeartbeatRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/gateway.GatewayService/SessionHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CommandInfo(ctx context.Context, in *CommandInfoRequest, opts ...grpc.CallOption) (*CommandInfoResponse, error) {
	out := new(CommandInfoResponse)
	err := c.cc.Invoke(ctx, "/gateway.GatewayService/CommandInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) CommandDetailsChunk(ctx context.Context, in *CommandDetailsChunkRequest, opts ...grpc.CallOption) (*CommandDetailsChunkResponse, error) {
	out := new(CommandDetailsChunkResponse)
	err := c.cc.Invoke(ctx, "/gateway.GatewayService/CommandDetailsChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ResultInfo(ctx context.Context, in *ResultInfoRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/gateway.GatewayService/ResultInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ResultDetailsChunk(ctx context.Context, in *ResultDetailsChunkRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/gateway.GatewayService/ResultDetailsChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServiceServer is the server API for GatewayService service.
// All implementations must embed UnimplementedGatewayServiceServer
// for forward compatibility
type GatewayServiceServer interface {
	RegisterNewSession(context.Context, *RegisterNewSessionRequest) (*EmptyResponse, error)
	SessionHeartbeat(context.Context, *SessionHeartbeatRequest) (*EmptyResponse, error)
	CommandInfo(context.Context, *CommandInfoRequest) (*CommandInfoResponse, error)
	CommandDetailsChunk(context.Context, *CommandDetailsChunkRequest) (*CommandDetailsChunkResponse, error)
	ResultInfo(context.Context, *ResultInfoRequest) (*EmptyResponse, error)
	ResultDetailsChunk(context.Context, *ResultDetailsChunkRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedGatewayServiceServer()
}

// UnimplementedGatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServiceServer struct {
}

func (UnimplementedGatewayServiceServer) RegisterNewSession(context.Context, *RegisterNewSessionRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewSession not implemented")
}
func (UnimplementedGatewayServiceServer) SessionHeartbeat(context.Context, *SessionHeartbeatRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionHeartbeat not implemented")
}
func (UnimplementedGatewayServiceServer) CommandInfo(context.Context, *CommandInfoRequest) (*CommandInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandInfo not implemented")
}
func (UnimplementedGatewayServiceServer) CommandDetailsChunk(context.Context, *CommandDetailsChunkRequest) (*CommandDetailsChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandDetailsChunk not implemented")
}
func (UnimplementedGatewayServiceServer) ResultInfo(context.Context, *ResultInfoRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResultInfo not implemented")
}
func (UnimplementedGatewayServiceServer) ResultDetailsChunk(context.Context, *ResultDetailsChunkRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResultDetailsChunk not implemented")
}
func (UnimplementedGatewayServiceServer) mustEmbedUnimplementedGatewayServiceServer() {}

// UnsafeGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServiceServer will
// result in compilation errors.
type UnsafeGatewayServiceServer interface {
	mustEmbedUnimplementedGatewayServiceServer()
}

func RegisterGatewayServiceServer(s grpc.ServiceRegistrar, srv GatewayServiceServer) {
	s.RegisterService(&GatewayService_ServiceDesc, srv)
}

func _GatewayService_RegisterNewSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNewSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).RegisterNewSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.GatewayService/RegisterNewSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).RegisterNewSession(ctx, req.(*RegisterNewSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_SessionHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).SessionHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.GatewayService/SessionHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).SessionHeartbeat(ctx, req.(*SessionHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CommandInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CommandInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.GatewayService/CommandInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CommandInfo(ctx, req.(*CommandInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_CommandDetailsChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandDetailsChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CommandDetailsChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.GatewayService/CommandDetailsChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CommandDetailsChunk(ctx, req.(*CommandDetailsChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ResultInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ResultInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.GatewayService/ResultInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ResultInfo(ctx, req.(*ResultInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ResultDetailsChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultDetailsChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ResultDetailsChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.GatewayService/ResultDetailsChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ResultDetailsChunk(ctx, req.(*ResultDetailsChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayService_ServiceDesc is the grpc.ServiceDesc for GatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.GatewayService",
	HandlerType: (*GatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNewSession",
			Handler:    _GatewayService_RegisterNewSession_Handler,
		},
		{
			MethodName: "SessionHeartbeat",
			Handler:    _GatewayService_SessionHeartbeat_Handler,
		},
		{
			MethodName: "CommandInfo",
			Handler:    _GatewayService_CommandInfo_Handler,
		},
		{
			MethodName: "CommandDetailsChunk",
			Handler:    _GatewayService_CommandDetailsChunk_Handler,
		},
		{
			MethodName: "ResultInfo",
			Handler:    _GatewayService_ResultInfo_Handler,
		},
		{
			MethodName: "ResultDetailsChunk",
			Handler:    _GatewayService_ResultDetailsChunk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/service/gateway.proto",
}
